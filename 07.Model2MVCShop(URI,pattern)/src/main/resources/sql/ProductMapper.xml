<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProductMapper">
 	
 	
	<resultMap id="productSelectMap" type="product">
		<result property="prodNo" 		column="prod_no" 			jdbcType="NUMERIC"/>
		<result property="prodName"		column="prod_name" 			jdbcType="VARCHAR" />
		<result property="prodDetail" 	column="prod_detail" 		jdbcType="VARCHAR" />
		<result property="manuDate" 	column="manufacture_day" 	jdbcType="VARCHAR" />
		<result property="price" 		column="price" 				jdbcType="NUMERIC" />
		<result property="fileName" 	column="image_file" 		jdbcType="VARCHAR" />
		<result property="regDate" 		column="reg_date" 			jdbcType="DATE" />
		<result property="proTranCode"	column="tran_status_code"	jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="insertProduct"		parameterType="product" >
	 	INSERT
		INTO product( prod_no , prod_name , prod_detail , manufacture_day , price , image_file , reg_date ) 
		VALUES	 (	seq_product_prod_no.nextval , #{prodName} , #{prodDetail:VARCHAR} , #{manuDate:VARCHAR} , 
							#{price:NUMERIC} , #{fileName:VARCHAR} , to_char(SYSDATE, 'YYYYMMDD') )
	 </insert>
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="findProduct"	parameterType="int"	resultMap="productSelectMap">
		SELECT
		prod_no , prod_name , prod_detail , manufacture_day , price , image_file , reg_date		
		FROM product
		WHERE prod_no = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateProduct"	parameterType="product" >
	   	UPDATE product
	   	<set>
	   		prod_name 	= #{prodName} ,
			prod_detail	= #{prodDetail} ,
			manufacture_day = #{manuDate} ,
			price = #{price} ,
			image_file = #{fileName}
	   	</set>
	   	WHERE prod_no = #{prodNo}
	 </update>
	 
	 <delete 	id="deleteProduct"  parameterType="int" >
	 	DELETE
	 	FROM product
	 	WHERE prod_no = #{value} 
	 </delete>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getProductList"  parameterType="search"	resultMap="productSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT p.* , 
	  									CASE WHEN NVL(t.tran_status_code, 0) = 1 THEN '구매완료'
	  										 WHEN NVL(t.tran_status_code, 0) = 2 THEN '배송중'
	  										 WHEN NVL(t.tran_status_code, 0) = 3 THEN '배송완료'
	  										 ELSE '판매중' END AS tran_status_code
										FROM product p, transaction t
											<where>
												p.prod_no = t.prod_no(+) 
												<if test="searchCondition != null">
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				and p.prod_no = #{searchKeyword}
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				AND p.prod_name LIKE '%'||#{searchKeyword}||'%'
													</if>
													<if test="searchCondition == 2 and searchKeyword !='' ">
										 				AND p.price LIKE '%'||#{searchKeyword}||'%'
													</if>
												</if>
												<if test="findby != null">
													<if test="findby == 'sold' and findby != '' ">
													AND NVL(t.tran_status_code, 0) != 0
													</if>
													<if test="findby == 'sale' and findby != '' ">
													AND NVL(t.tran_status_code, 0) = 0
													</if>
												</if>
											</where>
											ORDER BY 
											<!-- NVL(t.tran_status_code, 0), p.prod_no ASC  -->
											<choose>
												<when test = "sorting == 'byPrice'">
												p.price DESC 
												</when>
												<otherwise>
												NVL(t.tran_status_code, 0) ASC, p.prod_no DESC 
												</otherwise>
											</choose>
											 ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	SELECT COUNT(*)
	FROM( SELECT p.*, NVL(t.tran_status_code, 0)
			FROM product p, transaction t
			<where>
				p.prod_no = t.prod_no(+) 
				<if test="searchCondition != null">
					<if test="searchCondition == 0 and searchKeyword !='' ">
					and p.prod_no = #{searchKeyword}
					</if>
					<if test="searchCondition == 1 and searchKeyword !='' ">
					AND p.prod_name LIKE '%'||#{searchKeyword}||'%'
					</if>
					<if test="searchCondition == 2 and searchKeyword !='' ">
					AND p.price LIKE '%'||#{searchKeyword}||'%'
					</if>
				</if>
				<if test="findby != null">
					<if test="findby == 'sold' and findby != '' ">
					AND NVL(t.tran_status_code, 0) != 0
					</if>
					<if test="findby == 'sale' and findby != '' ">
					AND NVL(t.tran_status_code, 0) = 0
					</if>
				</if>
			</where> ) countTable						
	 </select>
	 
</mapper>